from vfeed import api,update
import urllib2
import os
import magic
import sys
import mimetypes
import logging
import platform
import subprocess
EDB="https://www.exploit-db.com/download/{0}"
INFO_TAG = "[Info]"
ERROR_TAG = "[Error]"


class VExploiter():
    def __init__(self, debug=False):
        self.vf = api.vFeed
        self.updater = update.vFeedUpdate()
        if debug:
            logging.basicConfig(level=logging.DEBUG)
        else:
            logging.basicConfig(level=logging.ERROR)

        if not os.path.isfile('vfeed.db'):
            self.updater.update()
    def getExploit(self,source,id):
        if source == "exploit-db" or source == "edb":
            self.getEDB(id)
        if source == "msf":
            self.getMSF(id)


    def getExploits(self, cves):
        for cve in cves:
            v = api.vFeed(cve)
            edb_info = v.get_edb()
            print edb_info
            self.getEDB(edb_info[0]['id'])

    def getEDB(self, id):
        # import ipdb;ipdb.set_trace()
        try:
            url = urllib2.urlopen(urllib2.Request(EDB.format(id)))
            logging.info("Getting exploit at {0}".format(EDB.format(id)))
            self.exploitCode = url.read()
            if not self.exploitCode:
                raise urllib2.HTTPError

        except:
            logging.error("id={0} does not exist on exploit-db".format(id))
            sys.exit(-1)
        file_extension = mimetypes.guess_extension(magic.from_buffer(self.exploitCode, mime=True))
        filename = "{0}{1}".format( id, file_extension)
        savedExploit = open(filename, 'w')
        savedExploit.write(self.exploitCode)
        logging.info("Saved exploit as {0}".format(filename))
        savedExploit.close()

    def getMSF(self, id):
        logging.error("Not yet implemented")




    def getVulnerableCVEList(self,pkgname):

        package =  str(pkgname)
        #print package
        distro = platform.dist()[0]

        cmd = "dpkg -s " + package + " | grep \'Version\' | awk \'{print $2}\'"
        #print cmd
        p = subprocess.Popen(cmd, stdout = subprocess.PIPE, shell=True)
        version = p.communicate()[0].split("\n")[0]
        #version = "4.3-7ubuntu1.4"

        cmd = "apt-get changelog " + package + " > changelog.txt"
        #print cmd
        p = subprocess.Popen(cmd, shell=True)
        subprocess.Popen.terminate(p)

        cmd = "sed \"/" + version + "/q\" changelog.txt | grep -oh \"CVE-[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]\""
        #print cmd
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True);
        foundCVEs = set(p.communicate()[0].split("\n"))

        return foundCVEs

if __name__ == "__main__":
    vexploit = VExploiter(debug=True)
    print sys.argv
    cveList = vexploit.getVulnerableCVEList(sys.argv[1])
    vexploit.getExploits(cveList)
